import { describe, test, expect, Result } from './tests.uts'


// class TestSuper implements UTSKeyIterable {
// 	r1: string = ""
// 	r2: Int = 1
// 	r3: boolean = false
	
// 	ignoredKeys(): string[] {
// 		return ["r1"]
// 	}
// }


class TestChild implements UTSValueIterable<any | null> {
	a: string = ""
	b: Int = 1
	c: boolean = false
	
	holderArray: (any | null)[] = [11, 22, null, 33, 44, null];
  
  constructor(){
    super()
  }
	
	
	ignoredKeys(): string[] {
		// var result = [ignoredKeys()]
		// result.push("holderArray")
		return ["holderArray"]
	}
	
	valueIterator(): UTSIterator<any | null> {
		let holderIndex = 0;
		let obj: UTSIterator<any | null> = {
			next(): UTSIteratorResult<any | null> {
				return UTSIteratorResult<any | null>(holderIndex == this.holderArray.size - 1, this.holderArray[holderIndex++])
			}
		}
		return obj
	}
}

	class TestClass implements UTSValueIterable<any | null> {
		
		holderArray: (any | null)[] = [null,  null]
		constructor(){
			super()
		}
		
		valueIterator(): UTSIterator<any | null> {
			let holderIndex = 0;
			let obj: UTSIterator<any | null> = {
				next(): UTSIteratorResult<any | null> {
					
					let currentVal = this.holderArray[holderIndex++]
					while(currentVal == null ){
						if(holderIndex == this.holderArray.size - 1){
							break;
						}
						currentVal = this.holderArray[holderIndex++]
					}
					return UTSIteratorResult<any | null>(holderIndex == this.holderArray.size - 1,currentVal )
				}
			}
			return obj
		}
		
	}
	
	
	
	class TestClass2 implements UTSValueIterable<any | null> {
		
		holderArray: (any | null)[] = [11, 22, null, 33, 44, null]
		constructor(){
			super()
		}
		
		valueIterator(): UTSIterator<any | null> {
			let holderIndex = 0;
			let obj: UTSIterator<any | null> = {
				next(): UTSIteratorResult<any | null> {
					
					let currentVal = this.holderArray[holderIndex++]
					while(currentVal == null ){
						if(holderIndex == this.holderArray.size - 1){
							break;
						}
						currentVal = this.holderArray[holderIndex++]
					}
					return UTSIteratorResult<any | null>(holderIndex == this.holderArray.size - 1,currentVal )
				}
			}
			return obj
		}
		
	}
	
	
	
	class TestClass3 implements UTSValueIterable<any | null> {
		
		holderArray: (any | null)[] = [11, 22, null, 33, 44, null]
		
		constructor(){
			super()
		}
		
		valueIterator(): UTSIterator<any | null> {
			let holderIndex = 0;
			let obj: UTSIterator<any | null> = {
				next(): UTSIteratorResult<any | null> {
					return UTSIteratorResult<any | null>(holderIndex == this.holderArray.size - 1, this.holderArray[holderIndex++])
				}
			}
			return obj
		}
		
	}
  
  


export function testIterator(): Result {
    return describe("Iterator", () => {
        test('for...in', () => {
            // let test = new TestChild()
            // let result: string[] = []
            // for (item in test) {
            //   result.add(item)
            // }
            // expect(result).toEqual(["a", "b", "c"])
        })
		
    

    
        test('for...of', () => {
          // test Array
            let arr = ["a", "b", "c", "d"]
            let result1: string[] = []
            for (let item of arr) {
              result1.add(item)
            }
            expect(result1).toEqual(["a", "b", "c", "d"])
            
            // test Map
            let dic = new Map<string, any>()
            dic.set("a", 1)
            dic.set("b", 2)
            dic.set("c", 3)
            //let result2: [any] = []
             let result2: Array<any> = []
            for (let item of dic) {
              result2.add(item)
            }
            // #ifdef APP-ANDROID
            expect(result2).toEqual(
              [["a", 1], ["b", 2], ["c", 3]]
            )
            // #endif

            // test Set
            let set = new Set<any>()
            set.add("a")
            set.add("b")
            set.add("c")
            var result3: any[] = []
            for (let item of set) {
              result3.add(item)
            }
            expect(result3).toEqual(["a", "b", "c"])
            
            // test Class for UTSValueIterable
            let test = new TestChild()
            let result4: (any | null)[] = []
            for (item of test) {   
              result4.add(item)
            }
            expect(result4).toEqual([11, 22, null, 33, 44, null])
            
            
            let test = new TestClass()
            let forofRet = ""
            for (item of test) {
            	forofRet += item.toString()
            }
            expect(forofRet).toEqual('')
            
            let test2 = new TestClass2()
            let forofRet2 = ""
            for (item of test2) {
            	forofRet2 += item.toString()
            }
            expect(forofRet2).toEqual('11223344')
            
            let test3 = new TestClass3()
            let forofRet3 = ""
            for (item of test3) {
            	forofRet3 += item.toString()
            }
            expect(forofRet3).toEqual('1122null3344null')
            
        })
    })
}
