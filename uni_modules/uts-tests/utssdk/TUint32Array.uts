import {
  describe,
  test,
  expect,
  Result
} from './tests.uts'

export class TUint32Array {
  test() {
    // #ifdef (UNI-APP-X && APP-ANDROID) || WEB

    this.testuint32();
    this.testConstructor();
    this.testSet();
    this.testCopyWith();
    this.testEvery();
    this.testFill();
    this.testFilter();
    this.find();
    this.findIndex();
    this.foreach();
    this.iterator();
    this.includes();
    this.indexOf();
    this.join();
    this.keys();
    this.map();
    this.reduce();
    this.reduceRight();
    this.reverse();
    this.slice();
    this.sort();
    this.subarray();
    this.values();
    this.arrayBufferSlice();
    // #endif
  }

  // #ifdef (UNI-APP-X && APP-ANDROID) || WEB
  testuint32() {
    let uint32 = new Uint32Array(2);
    uint32[0] = 42;
    expect(uint32[0]).toEqual(42);
    expect(uint32.length).toEqual(2);
    expect(Uint32Array.BYTES_PER_ELEMENT).toEqual(4);

    let x = new Uint32Array([21, 31, 3]);
    expect(x[1]).toEqual(31);

    let y = new Uint32Array(x);
    expect(y[0]).toEqual(21);

    let buffer = new ArrayBuffer(16);
    let z = new Uint32Array(buffer, 2, 4);
    expect(z.byteOffset).toEqual(2);
    expect(z.length).toEqual(4);
  }

  testConstructor() {
    let buffer = new ArrayBuffer(16);
    let uint32 = new Uint32Array(buffer);
    uint32[1] = 42;
    expect(uint32.toString()).toEqual("0,42,0,0");
  }

  testSet() {
    // #TEST Uint32Array.set
    let uint32 = new Uint32Array(8);
    var array = [1, 2, 3];
    uint32.set(array, 1);
    expect(uint32.toString()).toEqual("0,1,2,3,0,0,0,0");
    // #END
  }

  testCopyWith() {
    // #TEST Uint32Array.copyWithin
    console.log("testCopyWith 1");
    let uint32 = new Uint32Array(8);
    uint32.set([1, 2, 3], 1);
    console.log("testCopyWith 1");
    uint32.copyWithin(3, 0, 3);
    console.log("testCopyWith 1");
    expect(uint32.toString()).toEqual("0,1,2,0,1,2,0,0");
    // #END
  }

  testEvery() {
    // #TEST Uint32Array.every
    // const isBelowThreshold = (currentValue: number, index: number, array: Uint32Array): boolean => currentValue < 40;
    let result = new Uint32Array([12, 5, 8, 130, 44]).every((value : number, _ : number, _a : Uint32Array) : boolean => value < 40);
    expect(result).toEqual(false);
    // #END
  }

  testFill() {
    // #TEST Uint32Array.fill
    let uint32 = new Uint32Array([1, 2, 3]).fill(4);
    expect(uint32.toString()).toEqual("4,4,4");

    uint32 = new Uint32Array([1, 2, 3]).fill(4, 1);
    expect(uint32.toString()).toEqual("1,4,4");

    uint32 = new Uint32Array([1, 2, 3]).fill(4, 1, 2);
    expect(uint32.toString()).toEqual("1,4,3");

    uint32 = new Uint32Array([1, 2, 3]).fill(4, 1, 1);
    expect(uint32.toString()).toEqual("1,2,3");

    uint32 = new Uint32Array([1, 2, 3]).fill(4, -3, -2);
    expect(uint32.toString()).toEqual("4,2,3");
    // #END
  }
  testFilter() {
    // #TEST Uint32Array.filter
    // const isBelowThreshold = (currentValue: number, index: number, _): boolean => currentValue >= 10;
    let uint32 = new Uint32Array([12, 5, 8, 44]).filter((value : number, _ : number, _a : Uint32Array) : boolean => value >= 10);
    expect(uint32.toString()).toEqual("12,44");
    // #END
  }

  find() {
    // #TEST Uint32Array.find
    let uint32 = new Uint32Array([4, 5, 8, 12]);
    let res = uint32.find((value : number, _ : number, _a : Uint32Array) : boolean => value > 5);
    expect(res).toEqual(8);
    // #END
  }

  findIndex() {
    // #TEST Uint32Array.findIndex
    let uint32 = new Uint32Array([4, 6, 8, 12]);
    let res = uint32.findIndex((value : number, _ : number, _a : Uint32Array) : boolean => value > 100);
    expect(res).toEqual(-1);

    let uuint32 = new Uint32Array([4, 6, 7, 120]);
    res = uuint32.findIndex((value : number, _ : number, _a : Uint32Array) : boolean => value > 100);
    expect(res).toEqual(3);
    // #END
  }

  foreach() {
    // #TEST Uint32Array.forEach
    new Uint32Array([0, 1, 2, 3]).forEach((value : number, index : number, _a : Uint32Array) => {
      console.log(`a[${index}] = ${value}`);
    });
    // #END
  }
  iterator() {
    // #TEST Uint32Array.entries
    let arr = new Uint32Array([10, 20, 30, 40, 50]);
    let entries = arr.entries();
    expect(entries.next().value[1]).toEqual(10);
    // #END
  }

  includes() {
    // #TEST Uint32Array.includes
    let uint32 = new Uint32Array([1, 2, 3]);
    let res = uint32.includes(2);
    expect(res).toEqual(true);

    res = uint32.includes(4);
    expect(res).toEqual(false);

    res = uint32.includes(3, 3);
    expect(res).toEqual(false);
    // #END
  }

  indexOf() {
    // #TEST Uint32Array.indexOf
    let uint32 = new Uint32Array([2, 5, 9]);
    let res = uint32.indexOf(2);
    expect(res).toEqual(0);

    res = uint32.indexOf(7);
    expect(res).toEqual(-1);

    res = uint32.indexOf(9, 2);
    expect(res).toEqual(2);

    res = uint32.indexOf(2, -1);
    expect(res).toEqual(-1);

    res = uint32.indexOf(2, -3);
    expect(res).toEqual(0);
    // #END
  }
  join() {
    // #TEST Uint32Array.join
    let uint32 = new Uint32Array([1, 2, 3]);
    let res = uint32.join();
    expect(res).toEqual("1,2,3");

    res = uint32.join(" / ");
    expect(res).toEqual("1 / 2 / 3");

    res = uint32.join("");
    expect(res).toEqual("123");
    // #END
  }

  keys() {
    // #TEST Uint32Array.keys
    let arr = new Uint32Array([10, 20, 30, 40, 50]);
    let keys = arr.keys();
    expect(keys.next().value).toEqual(0);
    // #END
  }

  map() {
    // #TEST Uint32Array.map
    let numbers = new Uint32Array([1, 4, 9]);
    let doubles = numbers.map((value : number, _ : number, _a : Uint32Array) : number => value * 2);
    expect(numbers.toString()).toEqual("1,4,9");
    expect(doubles.toString()).toEqual("2,8,18");
    // #END
  }

  reduce() {
    // #TEST Uint32Array.reduce
    let total = new Uint32Array([0, 1, 2, 3]);
    let res = total.reduce((accumulator : number, currentValue : number, _ : number, _a : Uint32Array) :
      number => accumulator + currentValue);
    expect(res).toEqual(6);

    total = new Uint32Array([0, 1, 2, 3]);
    res = total.reduce((accumulator : number, currentValue : number, _ : number, _a : Uint32Array) :
      number => accumulator + currentValue, 8);
    expect(res).toEqual(14);
    // #END
  }
  reduceRight() {
    // #TEST Uint32Array.reduceRight
    let total = new Uint32Array([0, 1, 2, 3]);
    let res = total.reduceRight((accumulator : number, currentValue : number, _ : number, _a : Uint32Array) :
      number => accumulator + currentValue);
    expect(res).toEqual(6);

    total = new Uint32Array([0, 1, 2, 3]);
    res = total.reduceRight((accumulator : number, currentValue : number, _ : number, _a : Uint32Array) :
      number => accumulator + currentValue, 8);
    expect(res).toEqual(14);
    // #END
  }

  reverse() {
    // #TEST Uint32Array.reverse
    let uint32 = new Uint32Array([1, 2, 3]);
    uint32.reverse();
    expect(uint32.toString()).toEqual("3,2,1");
    // #END
  }

  slice() {
    // #TEST Uint32Array.slice
    let uint32 = new Uint32Array([1, 2, 3]);
    let res = uint32.slice(1);
    expect(res.toString()).toEqual("2,3");

    res = uint32.slice(2);
    expect(res.toString()).toEqual("3");

    res = uint32.slice(-2);
    expect(res.toString()).toEqual("2,3");

    res = uint32.slice(0, 1);
    expect(res.toString()).toEqual("1");
    // #END
  }

  sort() {
    // #TEST Uint32Array.sort
    let numbers = new Uint32Array([40, 1, 5]);
    numbers.sort();
    expect(numbers.toString()).toEqual("1,5,40");

    numbers.sort((a, b) : number => a - b);
    expect(numbers.toString()).toEqual("1,5,40");
    // #END
  }
  subarray() {
    // #TEST Uint32Array.subarray
    let buffer = new ArrayBuffer(16);
    let uint32 = new Uint32Array(buffer);
    uint32.set([1, 2, 3]);
    expect(uint32.toString()).toEqual("1,2,3,0");

    let sub = uint32.subarray(0, 4);
    expect(sub.toString()).toEqual("1,2,3,0");
    // #END
  }

  values() {
    // #TEST Uint32Array.values
    let arr = new Uint32Array([1, 2, 3]);
    let values = arr.values();
    expect(values.next().value).toEqual(1);
    // #END
  }

  arrayBufferSlice() {

    // #TEST ArrayBuffer.slice
    let buffer = new ArrayBuffer(16);
    let uint32 = new Uint32Array(buffer);
    uint32[3] = 42;
    expect(uint32.toString()).toEqual("0,0,0,42");

    let res = buffer.slice(8);
    let sliced = new Uint32Array(res);
    expect(sliced[1]).toEqual(42);
    // #END

  }
  testSome() {
    // #TEST Uint32Array.some
    const uint32 = new Uint32Array([8, 20, 30, 40, 50]);
    const positives = new Uint32Array([10, 20, 30, 40, 50]);

    expect(uint32.some((element : number, index : number, array : Uint32Array) : boolean =>
      element < 10
    )).toEqual(true);


    expect(positives.some((element : number, index : number, array : Uint32Array) : boolean =>
      element < 0
    )).toEqual(false);
    // #END
  }

  // #endif
}